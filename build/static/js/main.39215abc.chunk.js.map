{"version":3,"sources":["styles/GlobalStyle.ts","service/api.ts","img/giphy.gif","pages/Home/style.ts","pages/Home/index.tsx","App.tsx","index.tsx"],"names":["createGlobalStyle","baseUrl","getJokeCategories","a","axios","get","response","data","searchJoke","term","getJokeByCategory","HomeContainer","styled","div","emptySearchResults","id","icon_url","value","Home","useState","categoriesJoke","setCategoriesJoke","categorySelected","setCategorySelected","setSearchJoke","searchField","setSearchField","isLoading","setIsLoading","resultSearch","setResultSearch","activeButton","setActiveButton","getCategories","api","console","log","useEffect","handleJokes","result","handleJokeByCategory","className","style","textAlign","type","onChange","e","target","onClick","disabled","length","map","joke","index","src","alt","ChuckGif","GlobalStyle","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"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","file":"static/js/main.39215abc.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\n\nexport default createGlobalStyle`\n    *{\n        padding: 0;\n        margin: 0;\n    }\n    body{\n        background: #cccc;\n        font-family: 'Chango', cursive;\n    }\n`","import axios from 'axios'\nimport { jokeCategoriesApiDataType, jokeSearchType, jokeByCategoryType } from '../utils/types'\n\nconst baseUrl =  'https://api.chucknorris.io/'\n\nconst getJokeCategories = async (): Promise<jokeCategoriesApiDataType> => {\n  const response = await axios.get(`${baseUrl}jokes/categories/`)\n  return response.data\n}\n\nconst searchJoke = async (term: string): Promise<jokeSearchType> => {\n  const response = await axios.get(`${baseUrl}jokes/search?query=${term}`)\n  return response.data\n}\n\nconst getJokeByCategory = async (term: string): Promise<jokeByCategoryType> => {\n  const response = await axios.get(`${baseUrl}jokes/random?category=${term}`)\n  return response.data\n}\n\n\nexport default { getJokeCategories, searchJoke, getJokeByCategory }","export default __webpack_public_path__ + \"static/media/giphy.41854774.gif\";","import styled from 'styled-components'\n\nexport const HomeContainer = styled.div`\n  padding-bottom: 2rem;\n  min-height: 100vh;\n  width: 100%;\n  background: linear-gradient(347deg, rgba(144,140,212,1) 0%, rgba(127,255,212,1) 100%);\n  .home-content {\n    margin: auto;\n    width: 70%;\n    .search-box {\n      padding: 1rem;\n      display: flex;\n      flex-direction: column;\n      justify-content: space-around;\n      align-items: center;\n      h2 {\n        margin: 0.75rem;\n      }\n    }\n  }\n  .categories {\n    margin: 1rem;\n    display: flex;\n    justify-content: center;\n    ul {\n      width: 70%;\n      list-style: none;\n      flex-wrap: wrap;\n      display: flex;\n    }\n  }\n  .category {\n    margin: 0.5rem;\n    padding: 0.3rem;\n    padding-top: 0.5rem;\n    vertical-align: bottom;\n    min-width: 6rem;\n    height: 2rem;\n    background: whitesmoke;\n    color: #777;\n    border-radius: 0.2rem;\n    box-shadow: 2px 4px 5px 1px rgba(0,0,0,0.75);\n    transition: all 0.5s;\n    &:hover {\n      cursor: pointer;\n      color: #222;\n      box-shadow: 1px 3px 3px 0px rgba(0,0,0,0.75);\n    }\n  }\n  .active {\n    color: #222;\n    box-shadow: 1px 3px 3px 0px rgba(0,0,0,0.75);\n  }\n  .input-group {\n    input[type=text] {\n      height: 2rem;\n      font-family: 'Chango', cursive;\n      padding: 0.25rem;\n      font-size: 1rem;\n    }\n    button[type=submit] {\n      box-shadow: 1px 3px 3px 0px rgba(0,0,0,0.75);\n      border-radius: 1rem;\n      margin-left: 0.5rem;\n      padding: 0.5rem;\n      font-family: 'Chango', cursive;\n      &:hover {\n        cursor: pointer;\n        background: yellowgreen;\n      }\n    }\n  }\n  .joke-card {\n    background: whitesmoke;\n    display: flex;\n    margin: 1rem 0;\n    padding: 0.5rem;\n    align-items: center;\n    box-shadow: 1px 2px 2px rgba(0,0,0,0.75);\n    border-radius: 0.2rem;\n    img {\n      padding-right: 1rem;\n    }\n  }\n  .joker {\n    display: block;\n  }\n  .search-gif {\n    margin: 1rem auto;\n    text-align: center;\n  }\n`","import React, { useEffect, useState } from 'react'\n\nimport api from '../../service/api'\nimport { jokeByCategoryType, IJoke } from '../../utils/types'\nimport ChuckGif from '../../img/giphy.gif'\nimport { HomeContainer } from './style'\n\nconst emptySearchResults = {\n  id: '',\n  icon_url: '',\n  value: ''\n}\n\nconst Home: React.FC = () => {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const [ categoriesJoke, setCategoriesJoke ] = useState([] as any)\n    const [ categorySelected, setCategorySelected ] = useState<jokeByCategoryType | null>()\n    const [ searchJoke, setSearchJoke ] = useState<string>('')\n    const [ searchField, setSearchField ] = useState<string>('')\n    const [ isLoading, setIsLoading ] = useState<boolean>(false)\n    const [ resultSearch, setResultSearch ] = useState<IJoke[]>([])\n    const [ activeButton, setActiveButton ] = useState<string>('')\n\n    // useEffect( () => {\n    //     api.get('jokes/categories').then(\n    //         response => {\n    //             setCategoriesJoke(response.data)\n    //         }\n    //     )\n    // }, [])\n\n    const getCategories = async () => {\n      try {\n        setIsLoading(true)\n        const response = await api.getJokeCategories()\n        setCategoriesJoke(response)\n      } catch (error) {\n        console.log(error)\n      } finally {\n        setIsLoading(false)\n      }\n    }\n\n    const hook = () => {\n      getCategories()\n    }\n\n    useEffect(hook, [])\n\n    const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {\n      setSearchField(e.target.value)\n      setSearchJoke(e.target.value)\n    }\n\n    const handleJokes = async () => {\n      try {\n        setIsLoading(true)\n        const response = await api.searchJoke(searchJoke)\n        setResultSearch(response.result)\n        setCategorySelected(null)\n        setActiveButton('')\n      } catch (error) {\n        console.log(error)\n      } finally {\n        setIsLoading(false)\n      }\n    }\n\n    const handleJokeByCategory = async (term: string) => {\n      try {\n        setIsLoading(true)\n        setSearchJoke('')\n        setSearchField('')\n        setActiveButton(term)\n\n        const response = await api.getJokeByCategory(term)\n        setCategorySelected(response)\n      } catch (error) {\n        console.log(error)\n      } finally {\n        setResultSearch([emptySearchResults])\n        setIsLoading(false)\n      }\n    }\n\n    return (\n        <HomeContainer>\n          <div className=\"home-content\">\n          <h1 style={{textAlign: 'center'}}>Norris Jokes</h1>\n          <div className=\"search-box\">\n            <h2>Find Joke</h2>\n            <div className=\"input-group\">\n              <input type=\"text\" onChange={handleSearch} value={searchField}/>\n              <button type=\"submit\" onClick={handleJokes} disabled={searchField?.length ? false : true}> Find joke</button>\n            </div>\n          </div>\n\n            <div className=\"categories\">\n                <ul>\n                  {\n                    categoriesJoke.map((joke: string, index: number) => (\n                      <li\n                        className={activeButton === joke ? \"active category\" : \"category\"}\n                        key={index}\n                        onClick={() => handleJokeByCategory(joke) }>{joke}</li>\n                    ))\n                  }\n                </ul>\n            </div>\n\n            <div className={ categorySelected ? \"joke-card\" : \"\" }>\n              <img src={categorySelected?.icon_url} alt={categorySelected?.value}/>\n              <h3>{categorySelected?.value}</h3>\n            </div>\n\n            { resultSearch && resultSearch[0] && resultSearch[0].id\n              ? <h3>Results found for: {searchJoke}</h3>\n              : ''\n            }\n\n            <div className={ isLoading ? \"search-gif\" : \"joker\"}>\n              {\n                isLoading\n                ? <img className=\"search-gif\" src={ChuckGif} alt=\"load\"/>\n                : resultSearch.map( result => (\n                  <div className={ result && result.value ? \"joke-card\" : \"\" } key={result.id}>\n                      <img src={result.icon_url} alt={result.value}/>\n                      <h3>{result.value}</h3>\n                  </div>\n                ))\n              }\n            </div>\n          </div>\n        </HomeContainer>\n    )\n}\n\nexport default Home","import React from 'react';\nimport GlobalStyle from '../src/styles/GlobalStyle';\nimport Home from './pages/Home'\n\nconst src: React.FC = () => {\n  return (\n    <>\n      <Home />\n      <GlobalStyle />\n    </>\n  )\n}\n\nexport default src;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}